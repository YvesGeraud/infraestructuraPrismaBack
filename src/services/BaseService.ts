/**
 * @fileoverview BaseService - Template base para servicios Prisma
 * Proporciona operaciones CRUD comunes con puntos de personalizaci√≥n
 */

import { prisma } from "../config/database";
import { PaginatedResponse } from "../types";
import { PaginationInput } from "../schemas/commonSchemas";

/**
 * Configuraci√≥n base para un servicio
 */
export interface BaseServiceConfig {
  tableName: string;
  defaultOrderBy: Record<string, "asc" | "desc">;
  relations?: Record<string, any>;
  campoActivo?: string; // Campo que indica si el registro est√° activo (por defecto 'activo')
}

/**
 * BaseService gen√©rico para operaciones CRUD
 */
export abstract class BaseService<T, CreateInput, UpdateInput, FilterInput> {
  protected abstract config: BaseServiceConfig;

  /**
   * üìù SISTEMA DE BIT√ÅCORA (Autom√°tico y Optimizado)
   *
   * Para activar en un servicio, solo necesitas 2 l√≠neas:
   * ```typescript
   * protected registrarEnBitacora = true;
   * protected nombreTablaParaBitacora = "LOCALIDAD"; // Nombre para ct_bitacora_tabla
   * ```
   *
   * BaseService se encarga autom√°ticamente de:
   * - Capturar datos antes/despu√©s del cambio
   * - üéØ OPTIMIZACI√ìN: Solo guarda campos que realmente cambiaron
   * - Buscar acciones en ct_bitacora_accion (usa cat√°logo existente)
   * - Buscar/crear registros en ct_bitacora_tabla si no existen
   * - Buscar sesi√≥n activa del usuario espec√≠fico en ct_sesion (TEMPORAL - mejorar con JWT)
   * - Registrar en dt_bitacora con las FK correctas dentro de la misma transacci√≥n
   * - Hacer rollback si falla la bit√°cora
   * - Serializar datos como JSON en campos LongText
   *
   * üöÄ BENEFICIOS DE OPTIMIZACI√ìN:
   * - Reduce el tama√±o de la bit√°cora hasta un 90%
   * - Mejora la legibilidad (solo cambios relevantes)
   * - Optimiza el rendimiento de consultas
   * - Facilita el an√°lisis de cambios espec√≠ficos
   *
   * ‚ö†Ô∏è REQUISITOS DE SEGURIDAD:
   * - ct_bitacora_accion debe estar poblado con acciones est√°ndar
   * - üö® ct_sesion DEBE tener al menos una sesi√≥n activa para cada usuario (OBLIGATORIO por seguridad)
   * - No se permite registrar en bit√°cora sin sesi√≥n v√°lida del usuario (previene puertas traseras)
   * - üí° MEJORA FUTURA: Pasar idSesion desde JWT en lugar de buscarlo en BD
   */
  protected registrarEnBitacora: boolean = false;
  protected nombreTablaParaBitacora: string = "";

  /**
   * üéØ Campos a excluir del registro en bit√°cora (para no registrar datos sensibles)
   * Override en servicios espec√≠ficos si necesitas excluir m√°s campos
   *
   * Por defecto excluye: contrase√±as, tokens, archivos grandes
   */
  protected camposExcluidosBitacora: string[] = [
    "password",
    "contrasena",
    "token",
    "refresh_token",
    "archivo",
    "imagen",
    "pdf",
  ];

  /**
   * M√©todo abstracto para configurar includes espec√≠ficos del modelo
   */
  protected abstract configurarIncludes(filters?: FilterInput): any;

  /**
   * M√©todo abstracto para construir WHERE clause espec√≠fico del modelo
   */
  protected abstract construirWhereClause(filters?: FilterInput): any;

  /**
   * Obtener modelo Prisma din√°micamente
   */
  protected get model() {
    return (prisma as any)[this.config.tableName];
  }

  /**
   * üîß Obtener modelo desde transacci√≥n o desde prisma global
   * √ötil para operaciones que pueden ejecutarse dentro o fuera de transacciones
   */
  protected obtenerModelo(tx?: any) {
    return tx ? (tx as any)[this.config.tableName] : this.model;
  }

  /**
   * üîç Obtener todos los registros con filtros y paginaci√≥n
   */
  async obtenerTodos(
    filters: FilterInput = {} as FilterInput,
    pagination: PaginationInput = {}
  ): Promise<PaginatedResponse<T>> {
    try {
      // üåê Soporte para espa√±ol (principal) e ingl√©s (compatibilidad)
      const pagina = pagination.pagina || 1;
      const limite = pagination.limite || 10;
      const skip = (pagina - 1) * limite;

      // Construir clauses espec√≠ficos del modelo
      const baseWhere = this.construirWhereClause(filters);

      // üîç FILTRO AUTOM√ÅTICO: Solo mostrar registros activos por defecto
      // A menos que se especifique expl√≠citamente incluir inactivos
      const campoActivo = this.config.campoActivo || "activo";
      const where = {
        ...baseWhere,
        // Solo agregar filtro de activo si no se especifica en los filtros
        ...(!(filters as any)?.incluirInactivos && { [campoActivo]: true }),
      };

      const include = this.configurarIncludes(filters);

      const [records, total] = await Promise.all([
        this.model.findMany({
          where,
          skip,
          take: limite,
          include,
          orderBy: this.config.defaultOrderBy,
        }),
        this.model.count({ where }),
      ]);

      const totalPaginas = Math.ceil(total / limite);

      return {
        data: records,
        pagination: {
          pagina,
          limite,
          total,
          totalPaginas,
          tieneSiguiente: pagina < totalPaginas,
          tieneAnterior: pagina > 1,
        },
      };
    } catch (error) {
      console.error(`Error al obtener ${this.config.tableName}:`, error);
      throw new Error(`Error al obtener registros de ${this.config.tableName}`);
    }
  }

  /**
   * üîç Obtener un registro por ID
   */
  async obtenerPorId(id: number, filters?: FilterInput): Promise<T | null> {
    try {
      const include = this.configurarIncludes(filters);

      const campoActivo = this.config.campoActivo || "activo";
      const record = await this.model.findUnique({
        where: {
          [this.getPrimaryKeyField()]: id,
          // üîç FILTRO AUTOM√ÅTICO: Solo buscar registros activos por defecto
          ...(!(filters as any)?.incluirInactivos && { [campoActivo]: true }),
        },
        include,
      });

      return record;
    } catch (error) {
      console.error(`Error al obtener ${this.config.tableName} por ID:`, error);
      throw new Error(`Error al obtener registro de ${this.config.tableName}`);
    }
  }

  /**
   * üìä Obtener TODOS los registros sin paginaci√≥n
   * √ötil para reportes, exportaciones, etc.
   * ‚ö†Ô∏è PRECAUCI√ìN: Puede retornar muchos registros
   */
  async obtenerTodosSinPaginacion(
    filters?: Partial<FilterInput>
  ): Promise<T[]> {
    try {
      const where = this.construirWhereClause(filters as FilterInput);
      const include = this.configurarIncludes(filters as FilterInput);

      // üîç FILTRO AUTOM√ÅTICO: Solo mostrar registros activos por defecto
      const campoActivo = this.config.campoActivo || "activo";
      const whereCompleto = {
        ...where,
        ...(!(filters as any)?.incluirInactivos && { [campoActivo]: true }),
      };

      const records = await this.model.findMany({
        where: whereCompleto,
        include,
        orderBy: this.config.defaultOrderBy,
        // Sin take/skip = trae TODOS los registros
      });

      return records;
    } catch (error) {
      console.error(
        `Error al obtener todos los ${this.config.tableName}:`,
        error
      );
      throw new Error(`Error al obtener registros de ${this.config.tableName}`);
    }
  }

  /**
   * üî¢ Contar registros que cumplan con los filtros
   * √ötil para decidir si usar streaming o carga normal
   */
  async contarRegistros(filters?: Partial<FilterInput>): Promise<number> {
    try {
      const where = this.construirWhereClause(filters as FilterInput);

      // üîç FILTRO AUTOM√ÅTICO: Solo contar registros activos por defecto
      const campoActivo = this.config.campoActivo || "activo";
      const whereCompleto = {
        ...where,
        ...(!(filters as any)?.incluirInactivos && { [campoActivo]: true }),
      };

      const count = await this.model.count({ where: whereCompleto });
      return count;
    } catch (error) {
      console.error(`Error al contar ${this.config.tableName}:`, error);
      throw new Error(`Error al contar registros de ${this.config.tableName}`);
    }
  }

  /**
   * ‚ú® Crear un nuevo registro
   * Ejecuta dentro de una transacci√≥n para garantizar atomicidad con bit√°cora
   * @param datos - Datos para crear el registro
   * @param idSesion - ID de la sesi√≥n actual (OBLIGATORIO para bit√°cora y seguridad)
   * @param idUsuario - ID del usuario actual (OBLIGATORIO para bit√°cora y seguridad)
   */
  async crear(
    datos: CreateInput,
    idSesion: number,
    idUsuario: number
  ): Promise<T> {
    try {
      return await this.ejecutarEnTransaccion(async (tx) => {
        // Hook para validaciones personalizadas antes de crear
        await this.antesDeCrear(datos);

        const include = this.configurarIncludes();
        const modelo = this.obtenerModelo(tx);

        // üîê Agregar id_ct_usuario_in desde el JWT a los datos
        const datosConUsuario = {
          ...datos,
          id_ct_usuario_in: idUsuario,
        };

        // Crear el registro
        const record = await modelo.create({
          data: datosConUsuario,
          include,
        });

        // üìù Hook de bit√°cora (solo si est√° habilitado)
        if (this.registrarEnBitacora) {
          await this.registrarCreacionEnBitacora(
            datos,
            record,
            tx,
            idSesion,
            idUsuario
          );
        }

        // Hook para acciones personalizadas despu√©s de crear
        await this.despuesDeCrear(record);

        return record;
      });
    } catch (error) {
      console.error(`Error al crear ${this.config.tableName}:`, error);
      throw this.manejarErrorPrisma(error);
    }
  }

  /**
   * ‚úèÔ∏è Actualizar un registro existente
   * Ejecuta dentro de una transacci√≥n para garantizar atomicidad con bit√°cora
   * @param id - ID del registro a actualizar
   * @param datos - Datos para actualizar
   * @param idSesion - ID de la sesi√≥n actual (OBLIGATORIO para bit√°cora y seguridad)
   */
  async actualizar(
    id: number,
    datos: UpdateInput,
    idSesion: number,
    idUsuario: number
  ): Promise<T> {
    try {
      return await this.ejecutarEnTransaccion(async (tx) => {
        // Hook para validaciones personalizadas antes de actualizar
        await this.antesDeActualizar(id, datos);

        const modelo = this.obtenerModelo(tx);
        const include = this.configurarIncludes();

        // üì∏ Obtener datos anteriores (para bit√°cora)
        const datosAnteriores = await modelo.findUnique({
          where: { [this.getPrimaryKeyField()]: id },
          include,
        });

        if (!datosAnteriores) {
          throw new Error(`${this.config.tableName} no encontrado`);
        }

        // Actualizar el registro
        const record = await modelo.update({
          where: { [this.getPrimaryKeyField()]: id },
          data: {
            ...datos,
            // üïê Actualizar autom√°ticamente updatedAt en cada UPDATE
            fecha_up: new Date(),
            // üîê Agregar id_ct_usuario_up desde el JWT
            id_ct_usuario_up: idUsuario,
          },
          include,
        });

        // üìù Hook de bit√°cora (solo si est√° habilitado)
        if (this.registrarEnBitacora) {
          await this.registrarActualizacionEnBitacora(
            id,
            datos,
            datosAnteriores,
            record,
            tx,
            idSesion,
            idUsuario
          );
        }

        // Hook para acciones personalizadas despu√©s de actualizar
        await this.despuesDeActualizar(record);

        return record;
      });
    } catch (error) {
      console.error(`Error al actualizar ${this.config.tableName}:`, error);
      throw this.manejarErrorPrisma(error);
    }
  }

  /**
   * üóëÔ∏è Eliminar un registro (soft delete)
   * Ejecuta dentro de una transacci√≥n para garantizar atomicidad con bit√°cora
   * @param id - ID del registro a eliminar
   * @param idUsuarioUp - ID del usuario que ejecuta la eliminaci√≥n
   * @param idSesion - ID de la sesi√≥n actual (OBLIGATORIO para bit√°cora y seguridad)
   */
  async eliminar(
    id: number,
    idSesion: number,
    idUsuario: number
  ): Promise<void> {
    try {
      await this.ejecutarEnTransaccion(async (tx) => {
        // Hook para validaciones personalizadas antes de eliminar
        await this.antesDeEliminar(id);

        const modelo = this.obtenerModelo(tx);
        const include = this.configurarIncludes();

        // üì∏ Obtener datos antes de eliminar (para bit√°cora)
        const datosAnteriores = await modelo.findUnique({
          where: { [this.getPrimaryKeyField()]: id },
          include,
        });

        if (!datosAnteriores) {
          throw new Error(`${this.config.tableName} no encontrado`);
        }

        // üö´ SOFT DELETE: Actualizar estado a false en lugar de eliminar f√≠sicamente
        // Esto preserva los datos para auditor√≠a y evita problemas de integridad referencial
        const campoActivo = this.config.campoActivo || "activo";
        const updateData: any = {
          [campoActivo]: false,
          // Si existe campo de actualizaci√≥n, tambi√©n lo actualizamos
          ...(datosAnteriores.hasOwnProperty("fecha_up") && {
            fecha_up: new Date(),
          }),
          // Si se proporciona el usuario que elimina, registrarlo
          ...(idUsuario &&
            datosAnteriores.hasOwnProperty("id_ct_usuario_up") && {
              id_ct_usuario_up: idUsuario,
            }),
        };

        const registroEliminado = await modelo.update({
          where: { [this.getPrimaryKeyField()]: id },
          data: updateData,
          include,
        });

        // üìù Hook de bit√°cora (solo si est√° habilitado)
        if (this.registrarEnBitacora) {
          await this.registrarEliminacionEnBitacora(
            id,
            datosAnteriores,
            registroEliminado,
            idUsuario,
            tx,
            idSesion
          );
        }

        // Hook para acciones personalizadas despu√©s de eliminar (soft delete)
        await this.despuesDeEliminar(datosAnteriores);
      });
    } catch (error) {
      console.error(
        `Error al eliminar (soft delete) ${this.config.tableName}:`,
        error
      );
      throw error; // Re-lanzar para que el controlador lo maneje
    }
  }

  // ===========================================
  // M√âTODOS PARA PERSONALIZAR (HOOKS)
  // ===========================================

  /**
   * Hook ejecutado antes de crear un registro
   * Override en servicios espec√≠ficos para validaciones personalizadas
   */
  protected async antesDeCrear(datos: CreateInput): Promise<void> {
    // Implementar en servicios espec√≠ficos si es necesario
  }

  /**
   * Hook ejecutado despu√©s de crear un registro
   * Override en servicios espec√≠ficos para acciones post-creaci√≥n
   */
  protected async despuesDeCrear(record: T): Promise<void> {
    // Implementar en servicios espec√≠ficos si es necesario
  }

  /**
   * Hook ejecutado antes de actualizar un registro
   * Override en servicios espec√≠ficos para validaciones personalizadas
   */
  protected async antesDeActualizar(
    id: number,
    datos: UpdateInput
  ): Promise<void> {
    // Implementar en servicios espec√≠ficos si es necesario
  }

  /**
   * Hook ejecutado despu√©s de actualizar un registro
   * Override en servicios espec√≠ficos para acciones post-actualizaci√≥n
   */
  protected async despuesDeActualizar(record: T): Promise<void> {
    // Implementar en servicios espec√≠ficos si es necesario
  }

  /**
   * Hook ejecutado antes de eliminar un registro
   * Override en servicios espec√≠ficos para validaciones personalizadas
   */
  protected async antesDeEliminar(id: number): Promise<void> {
    // Implementar en servicios espec√≠ficos si es necesario
  }

  /**
   * Hook ejecutado despu√©s de eliminar un registro
   * Override en servicios espec√≠ficos para acciones post-eliminaci√≥n
   */
  protected async despuesDeEliminar(record: T): Promise<void> {
    // Implementar en servicios espec√≠ficos si es necesario
  }

  // ===========================================
  // üìù M√âTODOS AUTOM√ÅTICOS DE BIT√ÅCORA
  // ===========================================

  /**
   * üîç Extraer datos relevantes de un registro para bit√°cora
   * Excluye campos sensibles y metadatos innecesarios
   */
  private extraerDatosParaBitacora(registro: any): any {
    if (!registro) return null;

    const datos: any = {};

    for (const [key, value] of Object.entries(registro)) {
      // Excluir campos sensibles
      if (this.camposExcluidosBitacora.includes(key)) continue;

      // Excluir campos de metadata que no son relevantes para auditor√≠a
      if (key.startsWith("id_ct_usuario")) continue; // Ya se registra por separado
      if (key === "fecha_in" || key === "fecha_up") continue;

      // Excluir relaciones anidadas (solo IDs son relevantes)
      if (
        typeof value === "object" &&
        value !== null &&
        !Array.isArray(value)
      ) {
        continue;
      }

      datos[key] = value;
    }

    return datos;
  }

  /**
   * üéØ Extraer solo los campos que cambiaron entre dos registros
   * Optimiza el tama√±o de la bit√°cora guardando solo cambios relevantes
   */
  private extraerCamposAfectados(
    datosAnteriores: any,
    datosNuevos: any
  ): {
    camposAnteriores: any;
    camposNuevos: any;
  } {
    if (!datosAnteriores && !datosNuevos) {
      return { camposAnteriores: {}, camposNuevos: {} };
    }

    if (!datosAnteriores) {
      // Solo datos nuevos (creaci√≥n)
      return {
        camposAnteriores: {},
        camposNuevos: this.extraerDatosParaBitacora(datosNuevos),
      };
    }

    if (!datosNuevos) {
      // Solo datos anteriores (eliminaci√≥n)
      return {
        camposAnteriores: this.extraerDatosParaBitacora(datosAnteriores),
        camposNuevos: {},
      };
    }

    // Comparar ambos registros y extraer solo campos que cambiaron
    const datosAnterioresLimpios =
      this.extraerDatosParaBitacora(datosAnteriores);
    const datosNuevosLimpios = this.extraerDatosParaBitacora(datosNuevos);

    const camposAnteriores: any = {};
    const camposNuevos: any = {};

    // Obtener todas las claves √∫nicas
    const todasLasClaves = new Set([
      ...Object.keys(datosAnterioresLimpios),
      ...Object.keys(datosNuevosLimpios),
    ]);

    for (const clave of todasLasClaves) {
      const valorAnterior = datosAnterioresLimpios[clave];
      const valorNuevo = datosNuevosLimpios[clave];

      // Solo incluir si los valores son diferentes
      if (JSON.stringify(valorAnterior) !== JSON.stringify(valorNuevo)) {
        if (valorAnterior !== undefined) {
          camposAnteriores[clave] = valorAnterior;
        }
        if (valorNuevo !== undefined) {
          camposNuevos[clave] = valorNuevo;
        }
      }
    }

    return { camposAnteriores, camposNuevos };
  }

  /**
   * üìù Registrar operaci√≥n en bit√°cora (autom√°tico)
   */
  private async registrarEnBitacoraAutomatico(
    accion: "CREATE" | "UPDATE" | "DELETE",
    idRegistro: number,
    datosAnteriores: any | null,
    datosNuevos: any,
    idUsuario: number | undefined,
    idSesion: number | undefined,
    tx: any
  ): Promise<void> {
    try {
      // Validar que se configur√≥ el nombre de la tabla
      if (!this.nombreTablaParaBitacora) {
        console.warn(
          `‚ö†Ô∏è  registrarEnBitacora est√° activado pero nombreTablaParaBitacora no est√° configurado en ${this.config.tableName}`
        );
        return;
      }

      // üîç Obtener IDs de las tablas de cat√°logo de bit√°cora
      const { idAccion, idTabla } = await this.obtenerIdsBitacora(accion, tx);

      // üö® Validaci√≥n redundante de seguridad
      // (ya se valid√≥ en validarYObtenerSesion, pero por si acaso)
      if (!idSesion) {
        throw new Error(
          "üö® SEGURIDAD CR√çTICA: id_ct_sesion es NULL. " +
            "Esto NO deber√≠a suceder si la validaci√≥n funcion√≥ correctamente. " +
            "Revisar implementaci√≥n de validarYObtenerSesion."
        );
      }

      // üéØ Extraer solo los campos que realmente cambiaron
      const { camposAnteriores, camposNuevos } = this.extraerCamposAfectados(
        datosAnteriores,
        datosNuevos
      );

      await tx.dt_bitacora.create({
        data: {
          id_ct_bitacora_accion: idAccion,
          id_ct_bitacora_tabla: idTabla,
          id_registro_afectado: idRegistro,
          id_ct_sesion: idSesion, // Campo normal, no FK
          datos_anteriores: JSON.stringify(camposAnteriores),
          datos_nuevos: JSON.stringify(camposNuevos),
          id_ct_usuario_in: idUsuario || 1, // Usuario por defecto si no se proporciona
          estado: true,
        },
      });
    } catch (error) {
      console.error(`Error al registrar en bit√°cora:`, error);
      // Re-lanzar para que se haga rollback de toda la transacci√≥n
      throw error;
    }
  }

  /**
   * üîê VALIDAR SESI√ìN DEL USUARIO (SEGURIDAD CR√çTICA)
   *
   * Este m√©todo es OBLIGATORIO para garantizar que:
   * 1. ‚úÖ La sesi√≥n existe en la base de datos
   * 2. ‚úÖ La sesi√≥n est√° activa
   * 3. ‚úÖ La sesi√≥n pertenece al usuario que est√° haciendo la operaci√≥n
   * 4. ‚úÖ La sesi√≥n no ha expirado
   * 5. ‚úÖ No se puede falsificar una sesi√≥n
   *
   * @param idSesion - ID de la sesi√≥n a validar (OBLIGATORIO desde JWT)
   * @param idUsuario - ID del usuario que debe ser due√±o de la sesi√≥n
   * @param tx - Cliente de transacci√≥n Prisma
   * @returns ID de la sesi√≥n validada
   * @throws Error si la sesi√≥n es inv√°lida, no pertenece al usuario, o ha expirado
   */
  private async validarYObtenerSesion(
    idSesion: number,
    idUsuario: number,
    tx: any
  ): Promise<number> {
    // üö® Validaci√≥n obligatoria
    if (!idSesion) {
      throw new Error(
        "üö® SEGURIDAD: id_ct_sesion es OBLIGATORIO. " +
          "Debe proporcionarse desde el JWT del usuario autenticado. " +
          "No se permite registrar en bit√°cora sin sesi√≥n v√°lida."
      );
    }

    if (!idUsuario) {
      throw new Error(
        "üö® SEGURIDAD: id_ct_usuario es OBLIGATORIO. " +
          "Debe proporcionarse desde el JWT o los datos del registro."
      );
    }

    // üîç VALIDACI√ìN EN BD: Verificar que la sesi√≥n existe y es v√°lida
    const sesionRecord = await tx.ct_sesion.findUnique({
      where: {
        id_ct_sesion: idSesion,
      },
    });

    // ‚ùå Sesi√≥n no existe
    if (!sesionRecord) {
      throw new Error(
        `üö® SEGURIDAD: La sesi√≥n ${idSesion} no existe en la base de datos. ` +
          `Posible intento de falsificaci√≥n de sesi√≥n.`
      );
    }

    // ‚ùå Sesi√≥n no pertenece al usuario
    if (sesionRecord.id_ct_usuario !== idUsuario) {
      throw new Error(
        `üö® SEGURIDAD: La sesi√≥n ${idSesion} NO pertenece al usuario ${idUsuario}. ` +
          `Pertenece al usuario ${sesionRecord.id_ct_usuario}. ` +
          `Posible intento de usar sesi√≥n de otro usuario.`
      );
    }

    // ‚ùå Sesi√≥n inactiva
    if (!sesionRecord.activa) {
      throw new Error(
        `üö® SEGURIDAD: La sesi√≥n ${idSesion} est√° INACTIVA. ` +
          `El usuario debe iniciar sesi√≥n nuevamente.`
      );
    }

    // ‚ùå Sesi√≥n expirada
    const ahora = new Date();
    if (sesionRecord.fecha_expiracion < ahora) {
      // Marcar como inactiva autom√°ticamente
      await tx.ct_sesion.update({
        where: { id_ct_sesion: idSesion },
        data: { activa: false },
      });

      throw new Error(
        `üö® SEGURIDAD: La sesi√≥n ${idSesion} ha EXPIRADO. ` +
          `Expir√≥ el ${sesionRecord.fecha_expiracion.toISOString()}. ` +
          `El usuario debe iniciar sesi√≥n nuevamente.`
      );
    }

    // ‚úÖ Sesi√≥n v√°lida y verificada
    console.log(
      `‚úÖ SEGURIDAD: Sesi√≥n ${idSesion} validada correctamente para usuario ${idUsuario}`
    );

    return idSesion;
  }

  /**
   * üîç Obtener IDs de las tablas de cat√°logo de bit√°cora
   */
  private async obtenerIdsBitacora(
    accion: string,
    tx: any
  ): Promise<{
    idAccion: number;
    idTabla: number;
  }> {
    // Mapear acciones a nombres est√°ndar del cat√°logo existente
    const mapeoAcciones: Record<string, string> = {
      CREATE: "Creaci√≥n",
      UPDATE: "Actualizaci√≥n",
      DELETE: "Eliminaci√≥n",
    };

    const nombreAccion = mapeoAcciones[accion] || accion;

    // Buscar la acci√≥n en ct_bitacora_accion (NO crear, usar cat√°logo existente)
    const accionRecord = await tx.ct_bitacora_accion.findFirst({
      where: {
        nombre: nombreAccion,
        estado: true,
      },
    });

    if (!accionRecord) {
      throw new Error(
        `Acci√≥n de bit√°cora "${nombreAccion}" no encontrada en el cat√°logo ct_bitacora_accion. Aseg√∫rate de que el cat√°logo est√© poblado correctamente.`
      );
    }

    // Buscar o crear la tabla en ct_bitacora_tabla
    let tablaRecord = await tx.ct_bitacora_tabla.findFirst({
      where: {
        nombre: this.nombreTablaParaBitacora,
        estado: true,
      },
    });

    if (!tablaRecord) {
      // Crear la tabla si no existe
      tablaRecord = await tx.ct_bitacora_tabla.create({
        data: {
          nombre: this.nombreTablaParaBitacora,
          descripcion: `Tabla ${this.nombreTablaParaBitacora}`,
          estado: true,
          auditar: true,
          id_ct_usuario_in: 1, // Usuario sistema
        },
      });
    }

    return {
      idAccion: accionRecord.id_ct_bitacora_accion,
      idTabla: tablaRecord.id_ct_bitacora_tabla,
    };
  }

  /**
   * üìù Generar observaci√≥n legible autom√°ticamente
   */
  private generarObservacionAutomatica(
    accion: string,
    datosAnteriores: any | null,
    datosNuevos: any
  ): string {
    const nombreCampo = datosNuevos?.nombre || datosNuevos?.descripcion || "";
    const tabla = this.nombreTablaParaBitacora;

    switch (accion) {
      case "CREATE":
        return nombreCampo
          ? `${tabla} "${nombreCampo}" creado`
          : `Nuevo registro en ${tabla}`;
      case "UPDATE":
        return nombreCampo
          ? `${tabla} "${nombreCampo}" actualizado`
          : `Registro en ${tabla} actualizado`;
      case "DELETE":
        return nombreCampo
          ? `${tabla} "${nombreCampo}" desactivado`
          : `Registro en ${tabla} desactivado`;
      default:
        return `Operaci√≥n ${accion} en ${tabla}`;
    }
  }

  /**
   * üéØ HOOKS OPCIONALES para personalizar bit√°cora
   * Si necesitas l√≥gica personalizada, puedes sobrescribir estos m√©todos
   */
  protected async registrarCreacionEnBitacora(
    datos: CreateInput,
    resultado: T,
    tx: any,
    idSesionProporcionado: number,
    idUsuarioProporcionado: number
  ): Promise<void> {
    // Por defecto, usar registro autom√°tico
    const idRegistro = (resultado as any)[this.getPrimaryKeyField()];

    // üîê VALIDAR sesi√≥n obligatoriamente
    const idSesion = await this.validarYObtenerSesion(
      idSesionProporcionado,
      idUsuarioProporcionado,
      tx
    );

    await this.registrarEnBitacoraAutomatico(
      "CREATE",
      idRegistro,
      null,
      resultado,
      idUsuarioProporcionado,
      idSesion,
      tx
    );
  }

  protected async registrarActualizacionEnBitacora(
    id: number,
    datos: UpdateInput,
    datosAnteriores: T,
    resultado: T,
    tx: any,
    idSesionProporcionado: number,
    idUsuarioProporcionado: number
  ): Promise<void> {
    // Por defecto, usar registro autom√°tico

    // üîê VALIDAR sesi√≥n obligatoriamente
    const idSesion = await this.validarYObtenerSesion(
      idSesionProporcionado,
      idUsuarioProporcionado,
      tx
    );

    await this.registrarEnBitacoraAutomatico(
      "UPDATE",
      id,
      datosAnteriores,
      resultado,
      idUsuarioProporcionado,
      idSesion,
      tx
    );
  }

  protected async registrarEliminacionEnBitacora(
    id: number,
    datosAnteriores: T,
    registroEliminado: T,
    idUsuarioProporcionado: number,
    tx: any,
    idSesionProporcionado: number
  ): Promise<void> {
    // Por defecto, usar registro autom√°tico
    // üîê VALIDAR sesi√≥n obligatoriamente
    const idSesion = await this.validarYObtenerSesion(
      idSesionProporcionado,
      idUsuarioProporcionado,
      tx
    );

    await this.registrarEnBitacoraAutomatico(
      "DELETE",
      id,
      datosAnteriores,
      { estado: false },
      idUsuarioProporcionado,
      idSesion,
      tx
    );
  }

  /**
   * Obtener el nombre del campo de clave primaria
   * Override en servicios espec√≠ficos si no es el est√°ndar
   */
  protected getPrimaryKeyField(): string {
    // üîß Algoritmo inteligente para detectar PK autom√°ticamente
    const tableName = this.config.tableName.toLowerCase();

    // üìã Casos especiales conocidos
    if (tableName === "ct_localidad") {
      return "id_localidad";
    }

    if (tableName === "rl_infraestructura_jerarquia") {
      return "id_jerarquia";
    }

    // üîó Tablas de relaci√≥n (Rl_)
    if (tableName.startsWith("rl_")) {
      // Para tablas de relaci√≥n, asumimos id_[tabla_completa]
      // Rl_infraestructura_unidad_nivel ‚Üí id_infraestructura_unidad_nivel
      return `id_${tableName.replace("rl_", "")}`;
    }

    // üìä Tablas de datos (Dt_)
    if (tableName.startsWith("dt_")) {
      // Dt_bitacora ‚Üí id_bitacora
      return `id_${tableName.replace("dt_", "")}`;
    }

    // üìã Tablas de cat√°logo est√°ndar (Ct_)
    if (tableName.startsWith("ct_")) {
      const cleanName = tableName.replace("ct_", "");

      // üèóÔ∏è Casos de infraestructura
      if (cleanName.startsWith("infraestructura_")) {
        // ct_infraestructura_unidad ‚Üí id_unidad
        // ct_infraestructura_tipo_escuela ‚Üí id_tipo_escuela
        return `id_${cleanName.replace("infraestructura_", "")}`;
      }

      // üì¶ Casos de inventario
      if (cleanName.startsWith("inventario_")) {
        // ct_inventario_marca ‚Üí id_marca
        // ct_inventario_color ‚Üí id_color
        return `id_${cleanName.replace("inventario_", "")}`;
      }

      // üè´ Casos generales de cat√°logo
      // ct_municipio ‚Üí id_municipio
      // ct_localidad ‚Üí id_localidad (ya manejado arriba)
      return `id_${cleanName}`;
    }

    // ü§∑‚Äç‚ôÇÔ∏è Fallback: usar el nombre completo
    // Si no coincide con ning√∫n patr√≥n, usar tabla completa
    console.warn(
      `‚ö†Ô∏è  No se pudo determinar PK para tabla '${tableName}'. Usando 'id_${tableName}'`
    );
    return `id_${tableName}`;
  }

  /**
   * üõ°Ô∏è Manejar errores de Prisma y convertirlos en mensajes amigables
   */
  protected manejarErrorPrisma(error: any): Error {
    // Error de constraint UNIQUE violado
    if (error.code === "P2002") {
      const campo = error.meta?.target?.[0] || "campo";
      return new Error(
        `Ya existe un registro con ese ${campo}. Por favor, use un valor diferente.`
      );
    }

    // Error de registro no encontrado
    if (error.code === "P2025") {
      return new Error(`${this.config.tableName} no encontrado`);
    }

    // Error de foreign key constraint
    if (error.code === "P2003") {
      return new Error(
        `No se puede realizar la operaci√≥n. Existe una referencia a otro registro.`
      );
    }

    // Error de constraint requerido
    if (error.code === "P2011") {
      const campo = error.meta?.constraint || "campo requerido";
      return new Error(`El campo ${campo} es obligatorio`);
    }

    // Para otros errores, devolver el error original
    return error;
  }

  // ===========================================
  // üîÑ M√âTODOS DE TRANSACCIONES
  // ===========================================

  /**
   * üîÑ Ejecutar operaci√≥n dentro de una transacci√≥n
   * Garantiza atomicidad: TODO se ejecuta o NADA se ejecuta
   *
   * @param operacion - Funci√≥n que recibe el cliente de transacci√≥n (tx)
   * @returns Resultado de la operaci√≥n
   *
   * @example
   * ```typescript
   * await this.ejecutarEnTransaccion(async (tx) => {
   *   const usuario = await tx.ct_usuario.create({ data: datosUsuario });
   *   await tx.dt_perfil.create({ data: { id_usuario: usuario.id, ...datos } });
   *   return usuario;
   * });
   * ```
   */
  async ejecutarEnTransaccion<R>(
    operacion: (tx: any) => Promise<R>
  ): Promise<R> {
    try {
      return await prisma.$transaction(operacion, {
        maxWait: 5000, // 5 segundos de espera para obtener conexi√≥n
        timeout: 10000, // 10 segundos de timeout
      });
    } catch (error) {
      console.error(
        `Error en transacci√≥n para ${this.config.tableName}:`,
        error
      );
      throw this.manejarErrorPrisma(error);
    }
  }

  /**
   * üì¶ Crear m√∫ltiples registros de una vez (bulk insert)
   * M√°s eficiente que crear uno por uno
   *
   * @param datosArray - Array de datos a crear
   * @returns N√∫mero de registros creados
   *
   * @example
   * ```typescript
   * await municipioService.crearMultiples([
   *   { nombre: "Mun 1", ... },
   *   { nombre: "Mun 2", ... }
   * ]);
   * ```
   */
  async crearMultiples(datosArray: CreateInput[]): Promise<number> {
    try {
      if (!datosArray || datosArray.length === 0) {
        throw new Error("No se proporcionaron datos para crear");
      }

      // Hook para validaciones de cada registro
      for (const datos of datosArray) {
        await this.antesDeCrear(datos);
      }

      // Usar createMany para inserci√≥n masiva eficiente
      const resultado = await this.model.createMany({
        data: datosArray,
        skipDuplicates: false, // Fallar si hay duplicados
      });

      console.log(
        `‚úÖ ${resultado.count} registros creados en ${this.config.tableName}`
      );

      return resultado.count;
    } catch (error) {
      console.error(
        `Error al crear m√∫ltiples ${this.config.tableName}:`,
        error
      );
      throw this.manejarErrorPrisma(error);
    }
  }
}

/*
üîÑ SOFT DELETE + BIT√ÅCORA AUTOM√ÅTICA OPTIMIZADA IMPLEMENTADO:

‚úÖ Cambios realizados:
1. üö´ m√©todo eliminar() - Ahora hace UPDATE activo=false en lugar de DELETE f√≠sico
2. üîç m√©todo obtenerTodos() - Solo muestra registros activos por defecto
3. üîç m√©todo obtenerPorId() - Solo busca registros activos por defecto
4. üõ°Ô∏è manejarErrorPrisma() - Convierte errores de BD en mensajes amigables
5. üïê m√©todo actualizar() - Actualiza autom√°ticamente updatedAt en cada UPDATE
6. üìù Sistema de bit√°cora autom√°tico - Registra en dt_bitacora con FK correctas
7. üéØ OPTIMIZACI√ìN: Solo guarda campos que realmente cambiaron (reduce tama√±o 90%)

üìã Beneficios:
- ‚úÖ Preserva datos para auditor√≠a
- ‚úÖ Evita problemas de integridad referencial
- ‚úÖ Permite recuperaci√≥n de datos "eliminados"
- ‚úÖ Mantiene historial completo del sistema
- ‚úÖ Bit√°cora autom√°tica con ct_bitacora_accion y ct_bitacora_tabla
- ‚úÖ Bit√°cora optimizada (solo cambios relevantes)
- ‚úÖ Mejor rendimiento y legibilidad

üîß Para incluir registros inactivos:
- Pasar { incluirInactivos: true } en los filtros
- Ejemplo: obtenerTodos({}, { incluirInactivos: true })

üîß Para activar bit√°cora en un servicio:
- protected registrarEnBitacora = true;
- protected nombreTablaParaBitacora = "NOMBRE_TABLA";

‚ö†Ô∏è  Nota: Todos los modelos deben tener campo 'activo' (Boolean)
‚ö†Ô∏è  Nota: Sistema de bit√°cora requiere ct_bitacora_accion y ct_bitacora_tabla poblados
‚ö†Ô∏è  Nota: Bit√°cora optimizada solo guarda campos modificados
*/
