/**
 * @fileoverview Utilidades para el Sistema de Bit√°cora
 * 
 * Funciones helper para facilitar el uso del sistema de bit√°cora
 * con JWT y sesiones autenticadas.
 */

import { Request } from "express";
import { RequestAutenticado } from "../middleware/authMiddleware";

/**
 * üîê Extraer ID de sesi√≥n desde el JWT del usuario autenticado (OBLIGATORIO)
 * 
 * Esta funci√≥n obtiene el `id_ct_sesion` del usuario autenticado
 * para pasarlo al BaseService y registrar en bit√°cora.
 * 
 * ‚ö†Ô∏è IMPORTANTE: El id_ct_sesion es OBLIGATORIO para todas las operaciones.
 * Si no est√° presente, se lanza un error para prevenir operaciones sin auditor√≠a.
 * 
 * @param req - Request de Express (DEBE estar autenticado)
 * @returns ID de sesi√≥n (number)
 * @throws Error si el usuario no est√° autenticado o no tiene sesi√≥n v√°lida
 * 
 * @example
 * ```typescript
 * const idSesion = obtenerIdSesionDesdeJwt(req);
 * await municipioService.crear(datos, idSesion);
 * ```
 */
export function obtenerIdSesionDesdeJwt(req: Request): number {
  const reqAutenticado = req as RequestAutenticado;
  
  // üö® Verificar autenticaci√≥n OBLIGATORIA
  if (!reqAutenticado.user) {
    throw new Error(
      "üö® SEGURIDAD: Usuario no autenticado. " +
      "Todas las operaciones requieren autenticaci√≥n JWT v√°lida. " +
      "Aseg√∫rate de que el middleware verificarAutenticacion est√© activo."
    );
  }

  if (!reqAutenticado.user.id_sesion) {
    throw new Error(
      "üö® SEGURIDAD: JWT no contiene id_sesion. " +
      "El token JWT debe incluir informaci√≥n de sesi√≥n v√°lida. " +
      "Esto puede indicar un token malformado o sistema de auth desactualizado."
    );
  }

  // Convertir string a number (id_sesion viene como string del authMiddleware)
  const idSesion = parseInt(reqAutenticado.user.id_sesion, 10);
  
  if (isNaN(idSesion)) {
    throw new Error(
      `üö® SEGURIDAD: id_sesion inv√°lido en JWT: "${reqAutenticado.user.id_sesion}". ` +
      `Debe ser un n√∫mero entero v√°lido. ` +
      `Posible corrupci√≥n de token o manipulaci√≥n.`
    );
  }

  // Validaci√≥n adicional: id_sesion debe ser positivo
  if (idSesion <= 0) {
    throw new Error(
      `üö® SEGURIDAD: id_sesion debe ser mayor a 0, recibido: ${idSesion}. ` +
      `Posible intento de falsificaci√≥n.`
    );
  }

  console.log(`‚úÖ ID de sesi√≥n validado y extra√≠do desde JWT: ${idSesion}`);
  return idSesion;
}

/**
 * üîí Verificar que el usuario est√© autenticado
 * 
 * Valida que el request tenga un usuario autenticado con sesi√≥n v√°lida.
 * √ötil para verificar antes de realizar operaciones sensibles.
 * 
 * @param req - Request de Express
 * @returns true si est√° autenticado y tiene sesi√≥n, false en caso contrario
 */
export function tieneUsuarioAutenticado(req: Request): boolean {
  const reqAutenticado = req as RequestAutenticado;
  return !!reqAutenticado.user && !!reqAutenticado.user.id_sesion;
}

/**
 * üìä Obtener informaci√≥n completa del usuario autenticado
 * 
 * Retorna toda la informaci√≥n del usuario desde el JWT
 * 
 * @param req - Request de Express
 * @returns Objeto con informaci√≥n del usuario o null si no est√° autenticado
 */
export function obtenerUsuarioAutenticado(req: Request) {
  const reqAutenticado = req as RequestAutenticado;
  
  if (!reqAutenticado.user) {
    return null;
  }

  return {
    id_ct_usuario: reqAutenticado.user.id_ct_usuario,
    uuid_usuario: reqAutenticado.user.uuid_usuario,
    usuario: reqAutenticado.user.usuario,
    email: reqAutenticado.user.email,
    estado: reqAutenticado.user.estado,
    jti: reqAutenticado.user.jti,
    id_sesion: parseInt(reqAutenticado.user.id_sesion, 10),
    ip_origen: reqAutenticado.user.ip_origen,
    fecha_expiracion: reqAutenticado.user.fecha_expiracion,
  };
}

/**
 * üéØ Extraer ID de usuario desde el JWT (OBLIGATORIO)
 * 
 * Obtiene el ID del usuario autenticado para usarlo en operaciones
 * 
 * @param req - Request de Express (DEBE estar autenticado)
 * @returns ID del usuario
 * @throws Error si el usuario no est√° autenticado
 */
export function obtenerIdUsuarioDesdeJwt(req: Request): number {
  const reqAutenticado = req as RequestAutenticado;
  
  if (!reqAutenticado.user) {
    throw new Error(
      "üö® SEGURIDAD: Usuario no autenticado. " +
      "Se requiere JWT v√°lido para obtener id_ct_usuario."
    );
  }

  if (!reqAutenticado.user.id_ct_usuario) {
    throw new Error(
      "üö® SEGURIDAD: JWT no contiene id_ct_usuario. " +
      "Token malformado o corrupto."
    );
  }

  return reqAutenticado.user.id_ct_usuario;
}

/**
 * ‚úÖ Validar y obtener datos para bit√°cora (OBLIGATORIO)
 * 
 * Funci√≥n completa que valida autenticaci√≥n y extrae todos
 * los datos necesarios para registrar en bit√°cora.
 * 
 * Esta funci√≥n garantiza que SIEMPRE se tengan datos v√°lidos
 * de usuario y sesi√≥n antes de realizar cualquier operaci√≥n.
 * 
 * @param req - Request de Express (DEBE estar autenticado)
 * @returns Objeto con id_usuario e id_sesion validados
 * @throws Error si el usuario no est√° autenticado o faltan datos
 * 
 * @example
 * ```typescript
 * const datosBitacora = obtenerDatosParaBitacora(req);
 * await service.actualizar(id, datos, datosBitacora.id_sesion);
 * ```
 */
export function obtenerDatosParaBitacora(req: Request): {
  id_usuario: number;
  id_sesion: number;
} {
  const reqAutenticado = req as RequestAutenticado;
  
  if (!reqAutenticado.user) {
    throw new Error(
      "üö® SEGURIDAD: Usuario no autenticado. " +
      "No se pueden obtener datos para bit√°cora sin autenticaci√≥n v√°lida."
    );
  }

  if (!reqAutenticado.user.id_sesion) {
    throw new Error(
      "üö® SEGURIDAD: JWT no contiene id_sesion. " +
      "No se puede registrar en bit√°cora sin sesi√≥n v√°lida."
    );
  }

  const idSesion = parseInt(reqAutenticado.user.id_sesion, 10);
  
  if (isNaN(idSesion) || idSesion <= 0) {
    throw new Error(
      `üö® SEGURIDAD: id_sesion inv√°lido: "${reqAutenticado.user.id_sesion}". ` +
      `Debe ser un n√∫mero entero positivo.`
    );
  }

  return {
    id_usuario: reqAutenticado.user.id_ct_usuario,
    id_sesion: idSesion,
  };
}

