// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  role          Role      @default(USER)
  isActive      Boolean   @default(true)
  emailVerified Boolean   @default(false)
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relaciones
  orders        Order[]

  @@map("users")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  stock       Int      @default(0)
  sku         String   @unique
  category    String
  brand       String?
  images      Json?    // Array de strings
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  weight      Decimal? @db.Decimal(8, 2)
  dimensions  Json?    // Objeto con length, width, height
  tags        Json?    // Array de strings
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  orderItems  OrderItem[]

  @@map("products")
}

model Order {
  id        Int         @id @default(autoincrement())
  userId    Int
  status    OrderStatus @default(PENDIENTE)
  total     Decimal     @db.Decimal(10, 2)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relaciones
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Dt_escuela_alumno {
  id_escuela_alumno                   Int            @id @default(autoincrement())
  nombre                              String         @db.VarChar(100)
  app                                 String         @db.VarChar(50)          // Apellido paterno
  apm                                 String         @db.VarChar(50)          // Apellido materno
  curp                                String         @unique @db.VarChar(18)  // CURP siempre tiene 18 caracteres
  telefono                            String
  id_localidad                        Int
  codigo_postal                       Int
  fecha_nacimiento                    DateTime       @db.Date
  primaria_promedio_1                 Decimal?       @db.Decimal(5,1)
  primaria_promedio_2                 Decimal?       @db.Decimal(5,1)
  primaria_promedio_general           Decimal?       @db.Decimal(5,1)
  primaria_promedio_general_letra     String?        @db.VarChar(50)
  secundaria_promedio_1               Decimal?       @db.Decimal(5,1)
  secundaria_promedio_2               Decimal?       @db.Decimal(5,1)
  secundaria_promedio_3               Decimal?       @db.Decimal(5,1)
  secundaria_promedio_general         Decimal?       @db.Decimal(5,1)
  secundaria_promedio_general_letra   String?        @db.VarChar(50)
  primaria_folio_certificado          String?        @db.VarChar(50)
  secundaria_folio_certificado        String?        @db.VarChar(50)
  vigente                             EstadoVigencia @default(S)
  fecha_in                            DateTime       @default(now())         
  fecha_at                            DateTime       @updatedAt

  // Relaciones
  grados                              Rl_escuela_alumno_grado[]

  @@map("dt_escuela_alumno")
}

model Rl_escuela_alumno_grado {
  id_escuela_alumno_grado            Int             @id @default(autoincrement())
  id_escuela_alumno                  Int             
  id_escuela_plantel                 Int
  id_escuela_ciclo_escolar           Int
  nivel                              Int
  grado                              Int
  intento                            Int
  id_escuela_alumno_estatus          Int
  id_escuela_alumno_estatus_grado    Int
  fecha_in                           DateTime        @default(now())
  fecha_at                           DateTime?       @updatedAt

  // Relaciones
  dt_escuela_alumno                  Dt_escuela_alumno @relation(fields: [id_escuela_alumno], references: [id_escuela_alumno])

  @@map("rl_escuela_alumno_grado")
}


enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDIENTE
  CONFIRMADO
  ENVIADO
  ENTREGADO
  CANCELADO
}

enum EstadoVigencia {
  S  // SÃ­/Vigente
  N  // No/No vigente
}
